{
  "id": "2.2-agentes-langchain",
  "title": "Capacidades de Agentes e Ferramentas",
  "summary": "Sistema de agentes autônomos que utilizam LLMs para decisão e execução de ações com ferramentas externas",
  "bodyMD": "# Capacidades de Agentes e Ferramentas\n\n## O que são Agentes em LangChain\n\nAgentes são sistemas que utilizam um **LLM como motor de raciocínio** para decidir e executar ações, interagindo dinamicamente com ferramentas externas, APIs e entradas. Essa capacidade permite que aplicações de LLM vão além da mera geração de texto, **atuando de forma autônoma** para resolver problemas.\n\n---\n\n## Sistema de Ferramentas\n\n### Criação de Ferramentas\n\nA criação de ferramentas é facilitada através de:\n\n- **Decorador @tool** de `langchain_core.tools`\n- **Esquema estruturado** definindo nome, descrição e argumentos\n- **Conexão com modelos** via método `.bind_tools()`\n\n### Funcionamento\n\n- O modelo decide **autonomamente** se deve chamar uma ferramenta\n- Respostas seguem o **esquema de entrada** da ferramenta\n- Ferramentas implementam a **interface Runnable**\n- **LangGraph** oferece ToolNode para invocação otimizada\n\n### Toolkits Disponíveis\n\nColeções organizadas de ferramentas para tarefas específicas:\n\n- **Wikipedia** - Busca em conhecimento enciclopédico\n- **GitHub** - Integração com repositórios e código\n- **Gmail** - Automação de email\n- **SQL Databases** - Consultas em bancos de dados\n- **APIs de Busca** - Múltiplos provedores de busca\n- **Ferramentas Personalizadas** - Criação via funções Python ou modelos Pydantic\n\n---\n\n## Evolução: AgentExecutor → LangGraph\n\n### Limitações do AgentExecutor\n\nO sistema original apresentava restrições para:\n\n- Agentes de **longa duração**\n- Cenários de **produção complexos**\n- **Resiliência** e recuperação de falhas\n- **Supervisão humana** integrada\n\n### Vantagens do LangGraph\n\n**LangGraph** representa uma evolução estratégica com:\n\n- **Execução durável** - Resistente a falhas\n- **Human-in-the-loop** - Supervisão humana integrada\n- **Memória abrangente** - Estado persistente\n- **Modelo de grafo** - Fluxos complexos e não-determinísticos\n- **Capacidade de interrupção** - Controle fino de execução\n- **Inspeção avançada** - Debug e monitoramento\n\n### Recomendação de Uso\n\nPara **projetos de IA aplicada** que visam agentes de nível de produção:\n\n- **Adoção de LangGraph é crucial** para comportamentos complexos\n- Maior **curva de aprendizado** comparado ao AgentExecutor\n- **Investimento justificado** por sistemas mais confiáveis e controláveis\n- **Essencial para aplicações críticas** de produção\n\n---\n\n## Casos de Uso Práticos\n\n- **Automação de processos** empresariais\n- **Assistentes inteligentes** com acesso a sistemas externos\n- **Análise de dados** com múltiplas fontes\n- **Integração de APIs** complexas\n- **Workflows adaptativos** baseados em contexto",
  "lastUpdated": "2025-08-20T19:30:00.000Z"
}
